module Data = struct
  let sender = "test@econ.uzh.ch"
  let recipient = "it@econ.uzh.ch"
  let subject = "test interceptor"

  let body =
    "Dear tester,\n\n\
     this mail is generated by pool tool test stage.\n\n\
     Best regards\n\
     Pipeline ;-)"
  ;;

  let create_email () = Sihl_email.create ~sender ~recipient ~subject body

  let smtp_account =
    let open Email.SmtpAuth in
    Write.create
      (Label.of_string "example")
      (Server.of_string "smtp.example.com")
      (Port.of_int 587)
      None
      None
      Mechanism.PLAIN
      Protocol.STARTTLS
      (Default.create true)
    |> Test_utils.get_or_failwith
  ;;
end

let validate_email =
  let database_label = Test_utils.Data.database_label in
  Test_utils.case ~preparation:(fun () ->
    let open Email in
    (* NOTE: An SMTP configuration is also for testing required *)
    let%lwt () = handle_event database_label (SmtpCreated Data.smtp_account) in
    Lwt.return_ok ())
  @@ fun () ->
  let open Email.Service in
  let smtp_auth_id = None in
  let email =
    Data.create_email ()
    |> Email.Service.Job.create ?smtp_auth_id
    |> intercept_prepare
    |> CCResult.map Email.Service.Job.email
    |> Test_utils.get_or_failwith
  in
  let msg = "Missing 'TEST_EMAIL' env variable." in
  Alcotest.(
    check
      string
      "intercepted recipient"
      email.Sihl_email.recipient
      (Sihl.Configuration.read_string "TEST_EMAIL" |> CCOption.get_exn_or msg));
  let%lwt { Smtp.subject; _ } =
    Smtp.prepare ?smtp_auth_id database_label email
  in
  Alcotest.(
    check
      string
      "intercepted subject"
      subject
      (Format.asprintf
         "[Pool Tool] %s (original to: %s)"
         Data.subject
         Data.recipient));
  Lwt.return_ok ()
;;
